(globalThis.webpackChunktaskbox=globalThis.webpackChunktaskbox||[]).push([[179],{"./src/app/components/pure-inbox-screen.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Error:()=>Error,WithInteractions:()=>WithInteractions,default:()=>pure_inbox_screen_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),esm=__webpack_require__("./node_modules/@storybook/testing-library/dist/esm/index.js"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let PureInboxScreenComponent=class PureInboxScreenComponent{};PureInboxScreenComponent.propDecorators={error:[{type:core.Input}]},PureInboxScreenComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-pure-inbox-screen",template:'\n    <div *ngIf="error" class="page lists-show">\n      <div class="wrapper-message">\n        <span class="icon-face-sad"></span>\n        <p class="title-message">Oh no!</p>\n        <p class="subtitle-message">Something went wrong</p>\n      </div>\n    </div>\n\n    <div *ngIf="!error" class="page lists-show">\n      <nav>\n        <h1 class="title-page">Taskbox</h1>\n      </nav>\n      <app-task-list></app-task-list>\n    </div>\n  '})],PureInboxScreenComponent);var ngxs_store=__webpack_require__("./node_modules/@ngxs/store/__ivy_ngcc__/fesm2015/ngxs-store.js"),task_component=__webpack_require__("./src/app/components/task.component.ts"),ngxs_store_operators=__webpack_require__("./node_modules/@ngxs/store/__ivy_ngcc__/fesm2015/ngxs-store-operators.js");const actions_ARCHIVE_TASK="ARCHIVE_TASK",actions_PIN_TASK="PIN_TASK",actions_ERROR="APP_ERROR";class ArchiveTask{constructor(payload){this.payload=payload}}ArchiveTask.type=actions_ARCHIVE_TASK;class PinTask{constructor(payload){this.payload=payload}}PinTask.type=actions_PIN_TASK;class AppError{constructor(payload){this.payload=payload}}AppError.type=actions_ERROR;let TasksState=class TasksState{static getError(state){return state.error}static getAllTasks(state){return state.tasks}pinTask({getState,setState},{payload}){const task=getState().tasks.find((task=>task.id===payload));if(task){const updatedTask=Object.assign(Object.assign({},task),{state:"TASK_PINNED"});setState((0,ngxs_store_operators.r$)({tasks:(0,ngxs_store_operators.$G)((pinnedTask=>(null==pinnedTask?void 0:pinnedTask.id)===payload),updatedTask)}))}}archiveTask({getState,setState},{payload}){const task=getState().tasks.find((task=>task.id===payload));if(task){const updatedTask=Object.assign(Object.assign({},task),{state:"TASK_ARCHIVED"});setState((0,ngxs_store_operators.r$)({tasks:(0,ngxs_store_operators.$G)((archivedTask=>(null==archivedTask?void 0:archivedTask.id)===payload),updatedTask)}))}}setAppError({patchState,getState},{payload}){patchState({error:!getState().error})}};(0,tslib_es6.gn)([(0,ngxs_store.aU)(PinTask)],TasksState.prototype,"pinTask",null),(0,tslib_es6.gn)([(0,ngxs_store.aU)(ArchiveTask)],TasksState.prototype,"archiveTask",null),(0,tslib_es6.gn)([(0,ngxs_store.aU)(AppError)],TasksState.prototype,"setAppError",null),(0,tslib_es6.gn)([(0,ngxs_store.Qf)()],TasksState,"getError",null),(0,tslib_es6.gn)([(0,ngxs_store.Qf)()],TasksState,"getAllTasks",null),TasksState=(0,tslib_es6.gn)([(0,ngxs_store.ZM)({name:"taskbox",defaults:{tasks:[{id:"1",title:"Something",state:"TASK_INBOX"},{id:"2",title:"Something more",state:"TASK_INBOX"},{id:"3",title:"Something else",state:"TASK_INBOX"},{id:"4",title:"Something again",state:"TASK_INBOX"}],status:"idle",error:!1}}),(0,core.Injectable)()],TasksState);let TaskListComponent=class TaskListComponent{constructor(store){this.store=store,this.tasks$=store.select((state=>state.taskbox.tasks))}archiveTask(id){this.store.dispatch(new ArchiveTask(id))}pinTask(id){this.store.dispatch(new PinTask(id))}};TaskListComponent.ctorParameters=()=>[{type:ngxs_store.yh}],TaskListComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-task-list",template:'\n    <app-pure-task-list\n      [tasks]="tasks$ | async"\n      (onArchiveTask)="archiveTask($event)"\n      (onPinTask)="pinTask($event)"\n    ></app-pure-task-list>\n  '})],TaskListComponent);var pure_task_list_component=__webpack_require__("./src/app/components/pure-task-list.component.ts");let TaskModule=class TaskModule{};TaskModule=(0,tslib_es6.gn)([(0,core.NgModule)({imports:[common.ez,ngxs_store.$l.forFeature([TasksState])],exports:[task_component.m,TaskListComponent],declarations:[task_component.m,TaskListComponent,pure_task_list_component.C],providers:[]})],TaskModule);const pure_inbox_screen_stories={component:PureInboxScreenComponent,decorators:[(0,client.moduleMetadata)({declarations:[PureInboxScreenComponent],imports:[common.ez,TaskModule,ngxs_store.$l.forRoot([TasksState])],providers:[ngxs_store.yh]})],title:"PureInboxScreen"},Template=args=>({props:args}),Default=Template.bind({}),Error=Template.bind({});Error.args={error:!0};const WithInteractions=Template.bind({});WithInteractions.play=function(){var _ref=(0,asyncToGenerator.Z)((function*({canvasElement}){const canvas=(0,esm.uh)(canvasElement);yield esm.BX.click(canvas.getByLabelText("pinTask-1")),yield esm.BX.click(canvas.getByLabelText("pinTask-3"))}));return function(_x){return _ref.apply(this,arguments)}}()},"./src/app/components/pure-task-list.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Empty:()=>Empty,Loading:()=>Loading,WithPinnedTasks:()=>WithPinnedTasks,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _a,_b,_c,_d,_e,_f,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js"),_angular_common__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),_pure_task_list_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/components/pure-task-list.component.ts"),_task_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/components/task.component.ts"),_task_stories__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/components/task.stories.ts");const __WEBPACK_DEFAULT_EXPORT__={component:_pure_task_list_component__WEBPACK_IMPORTED_MODULE_1__.C,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({declarations:[_pure_task_list_component__WEBPACK_IMPORTED_MODULE_1__.C,_task_component__WEBPACK_IMPORTED_MODULE_2__.m],imports:[_angular_common__WEBPACK_IMPORTED_MODULE_4__.ez]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.componentWrapperDecorator)((story=>`<div style="margin: 3em">${story}</div>`))],title:"PureTaskList"},Template=args=>({props:Object.assign(Object.assign({},args),{onPinTask:_task_stories__WEBPACK_IMPORTED_MODULE_3__.actionsData.onPinTask,onArchiveTask:_task_stories__WEBPACK_IMPORTED_MODULE_3__.actionsData.onArchiveTask})}),Default=Template.bind({});Default.args={tasks:[Object.assign(Object.assign({},null===(_a=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_a?void 0:_a.task),{id:"1",title:"Task 1"}),Object.assign(Object.assign({},null===(_b=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_b?void 0:_b.task),{id:"2",title:"Task 2"}),Object.assign(Object.assign({},null===(_c=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_c?void 0:_c.task),{id:"3",title:"Task 3"}),Object.assign(Object.assign({},null===(_d=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_d?void 0:_d.task),{id:"4",title:"Task 4"}),Object.assign(Object.assign({},null===(_e=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_e?void 0:_e.task),{id:"5",title:"Task 5"}),Object.assign(Object.assign({},null===(_f=_task_stories__WEBPACK_IMPORTED_MODULE_3__.Default.args)||void 0===_f?void 0:_f.task),{id:"6",title:"Task 6"})]};const WithPinnedTasks=Template.bind({});WithPinnedTasks.args={tasks:[...Default.args.tasks.slice(0,5),{id:"6",title:"Task 6 (pinned)",state:"TASK_PINNED"}]};const Loading=Template.bind({});Loading.args={tasks:[],loading:!0};const Empty=Template.bind({});Empty.args=Object.assign(Object.assign({},Loading.args),{loading:!1})},"./src/app/components/task.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Archived:()=>Archived,Default:()=>Default,Pinned:()=>Pinned,Yang:()=>Yang,YangArchived:()=>YangArchived,YangPinned:()=>YangPinned,actionsData:()=>actionsData,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js");const __WEBPACK_DEFAULT_EXPORT__={component:__webpack_require__("./src/app/components/task.component.ts").m,title:"Task",excludeStories:/.*Data$/},actionsData={onPinTask:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.action)("onPinTask"),onArchiveTask:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.action)("onArchiveTask")},Template=args=>({props:Object.assign(Object.assign({},args),{onPinTask:actionsData.onPinTask,onArchiveTask:actionsData.onArchiveTask})}),Default=Template.bind({});Default.args={task:{id:"1",title:"Test Task",state:"TASK_INBOX"}};const Pinned=Template.bind({});Pinned.args={task:Object.assign(Object.assign({},Default.args.task),{state:"TASK_PINNED"})};const Archived=Template.bind({});Archived.args={task:Object.assign(Object.assign({},Default.args.task),{state:"TASK_ARCHIVED"})};const Yang=Template.bind({});Yang.args={task:{id:"2",title:"Yang Task",state:"TASK_INBOX"}};const YangPinned=Template.bind({});YangPinned.args={task:Object.assign(Object.assign({},Yang.args.task),{state:"TASK_PINNED"})};const YangArchived=Template.bind({});YangArchived.args={task:Object.assign(Object.assign({},Default.args.task),{state:"TASK_ARCHIVED"})}},"./src/app/components/pure-task-list.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C:()=>PureTaskListComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let PureTaskListComponent=class PureTaskListComponent{constructor(){this.tasksInOrder=[],this.loading=!1,this.onPinTask=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter,this.onArchiveTask=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter}set tasks(arr){const filteredTasks=[...arr.filter((t=>"TASK_PINNED"===t.state)),...arr.filter((t=>"TASK_PINNED"!==t.state))].filter((t=>"TASK_INBOX"===t.state||"TASK_PINNED"===t.state));this.tasksInOrder=filteredTasks.filter((t=>"TASK_INBOX"===t.state||"TASK_PINNED"===t.state))}};PureTaskListComponent.propDecorators={loading:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],onPinTask:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}],onArchiveTask:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}],tasks:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}]},PureTaskListComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"app-pure-task-list",template:'\n    <div class="list-items">\n      <app-task\n        *ngFor="let task of tasksInOrder"\n        [task]="task"\n        (onArchiveTask)="onArchiveTask.emit($event)"\n        (onPinTask)="onPinTask.emit($event)"\n      >\n      </app-task>\n      <div\n        *ngIf="tasksInOrder.length === 0 && !loading"\n        class="wrapper-message"\n      >\n        <span class="icon-check"></span>\n        <p class="title-message">You have no tasks</p>\n        <p class="subtitle-message">Sit back and relax</p>\n      </div>\n      <div *ngIf="loading">\n        <div *ngFor="let i of [1, 2, 3, 4, 5, 6]" class="loading-item">\n          <span class="glow-checkbox"></span>\n          <span class="glow-text">\n            <span>Loading</span> <span>cool</span> <span>state</span>\n          </span>\n        </div>\n      </div>\n    </div>\n    '})],PureTaskListComponent)},"./src/app/components/task.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{m:()=>TaskComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs");let TaskComponent=class TaskComponent{constructor(){this.onPinTask=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter,this.onArchiveTask=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter}onPin(id){this.onPinTask.emit(id)}onArchive(id){this.onArchiveTask.emit(id)}};TaskComponent.propDecorators={task:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],onPinTask:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}],onArchiveTask:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}]},TaskComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"app-task",template:'\n  <div class="list-item {{ task?.state }}">\n  <label\n    [attr.aria-label]="\'archiveTask-\' + task.id"\n    for="checked-{{ task?.id }}"\n    class="checkbox"\n  >\n    <input\n      type="checkbox"\n      disabled="true"\n      [defaultChecked]="task?.state === \'TASK_ARCHIVED\'"\n      name="checked-{{ task?.id }}"\n      id="checked-{{ task?.id }}"\n    />\n    <span class="checkbox-custom" (click)="onArchive(task.id)"></span>\n  </label>\n  <label\n    [attr.aria-label]="task.title + \'\'"\n    for="title-{{ task?.id }}"\n    class="title"\n  >\n    <input\n      type="text"\n      [value]="task.title"\n      readonly="true"\n      id="title-{{ task?.id }}"\n      name="title-{{ task?.id }}"\n      placeholder="Input title"\n    />\n  </label>\n  <button\n    *ngIf="task?.state !== \'TASK_ARCHIVED\'"\n    class="pin-button"\n    [attr.aria-label]="\'pinTask-\' + task.id"\n    (click)="onPin(task.id)"\n  >\n    <span class="icon-star"></span>\n  </button>\n</div>\n'})],TaskComponent)},"./src/polyfills.ts":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/zone.js/dist/zone.js")},"./.storybook/preview.js-generated-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{__namedExportsOrder:()=>__namedExportsOrder,parameters:()=>parameters});var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"Task","id":"interface-Task-decf62169610b19f3b9df15ab33e4f2ed95f6f9967833fe4162d82c58eed4ea45b95609ff6183f49d3dfeb9c070334e47ef64a5fe30ffed733d451497be96375","file":"src/app/task.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface Task {\\n  id: string;\\n  title: string;\\n  state: string;\\n}\\n","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":2},{"name":"state","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":4},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":3}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"TaskStateModel","id":"interface-TaskStateModel-a234ccf45a900d20fa3ed1c724e8f9d9ccd2aead30720e0ad5be2454006fc80965411be2fa21e5491cb581055fa6b544a0872c04ef2ed467b3f97f846520c286","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\nimport { Task } from \'../task.model\';\\n// a simple store that responds to actions that change the task\'s state in a file\\n// States are classes that define a state container.\\n\\n// Defines the actions available to the app\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n};\\n\\nexport class ArchiveTask {\\n  static readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\nexport class PinTask {\\n  static readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\n// The class definition for our error field\\nexport class AppError {\\n  static readonly type = actions.ERROR;\\n  constructor(public payload: boolean) {}\\n}\\n\\n\\n\\n// The initial state of our store when the app loads.\\n// Usually you would fetch this from a server\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\n  error: boolean;\\n}\\n\\n// Sets the default state\\n@State<TaskStateModel>({\\n  name: \'taskbox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false,\\n  },\\n})\\n@Injectable()\\nexport class TasksState {\\n  // Defines a new selector for the error field\\n  @Selector()\\n  static getError(state: TaskStateModel): boolean {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel): Task[] {\\n    return state.tasks;\\n  }\\n\\n  // Triggers the PinTask action, similar to redux\\n  @Action(PinTask)\\n  pinTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: PinTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (pinnedTask) => pinnedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Triggers the archiveTask action, similar to redux\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Function to handle how the state should be updated when the action is triggered\\n  @Action(AppError)\\n  setAppError(\\n    { patchState, getState }: StateContext<TaskStateModel>,\\n    { payload }: AppError\\n  ) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error,\\n    });\\n  }\\n}","properties":[{"name":"error","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":47},{"name":"status","deprecated":false,"deprecationMessage":"","type":"\\"idle\\" | \\"loading\\" | \\"success\\" | \\"error\\"","optional":false,"description":"","line":46},{"name":"tasks","deprecated":false,"deprecationMessage":"","type":"Task[]","optional":false,"description":"","line":45}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"User","id":"interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc","file":"src/stories/User.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface User {}\\n","properties":[],"indexSignatures":[],"methods":[]}],"injectables":[{"name":"TasksState","id":"injectable-TasksState-a234ccf45a900d20fa3ed1c724e8f9d9ccd2aead30720e0ad5be2454006fc80965411be2fa21e5491cb581055fa6b544a0872c04ef2ed467b3f97f846520c286","file":"src/app/state/task.state.ts","properties":[],"methods":[{"name":"archiveTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":97,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"ArchiveTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getAllTasks","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Task[]","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[124],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getError","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":63,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[124],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"PinTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"PinTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"PinTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setAppError","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"AppError","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":119,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"AppError"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"AppError","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\nimport { Task } from \'../task.model\';\\n// a simple store that responds to actions that change the task\'s state in a file\\n// States are classes that define a state container.\\n\\n// Defines the actions available to the app\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n};\\n\\nexport class ArchiveTask {\\n  static readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\nexport class PinTask {\\n  static readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\n// The class definition for our error field\\nexport class AppError {\\n  static readonly type = actions.ERROR;\\n  constructor(public payload: boolean) {}\\n}\\n\\n\\n\\n// The initial state of our store when the app loads.\\n// Usually you would fetch this from a server\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\n  error: boolean;\\n}\\n\\n// Sets the default state\\n@State<TaskStateModel>({\\n  name: \'taskbox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false,\\n  },\\n})\\n@Injectable()\\nexport class TasksState {\\n  // Defines a new selector for the error field\\n  @Selector()\\n  static getError(state: TaskStateModel): boolean {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel): Task[] {\\n    return state.tasks;\\n  }\\n\\n  // Triggers the PinTask action, similar to redux\\n  @Action(PinTask)\\n  pinTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: PinTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (pinnedTask) => pinnedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Triggers the archiveTask action, similar to redux\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Function to handle how the state should be updated when the action is triggered\\n  @Action(AppError)\\n  setAppError(\\n    { patchState, getState }: StateContext<TaskStateModel>,\\n    { payload }: AppError\\n  ) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error,\\n    });\\n  }\\n}","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"AppError","id":"class-AppError-a234ccf45a900d20fa3ed1c724e8f9d9ccd2aead30720e0ad5be2454006fc80965411be2fa21e5491cb581055fa6b544a0872c04ef2ed467b3f97f846520c286","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\nimport { Task } from \'../task.model\';\\n// a simple store that responds to actions that change the task\'s state in a file\\n// States are classes that define a state container.\\n\\n// Defines the actions available to the app\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n};\\n\\nexport class ArchiveTask {\\n  static readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\nexport class PinTask {\\n  static readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\n// The class definition for our error field\\nexport class AppError {\\n  static readonly type = actions.ERROR;\\n  constructor(public payload: boolean) {}\\n}\\n\\n\\n\\n// The initial state of our store when the app loads.\\n// Usually you would fetch this from a server\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\n  error: boolean;\\n}\\n\\n// Sets the default state\\n@State<TaskStateModel>({\\n  name: \'taskbox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false,\\n  },\\n})\\n@Injectable()\\nexport class TasksState {\\n  // Defines a new selector for the error field\\n  @Selector()\\n  static getError(state: TaskStateModel): boolean {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel): Task[] {\\n    return state.tasks;\\n  }\\n\\n  // Triggers the PinTask action, similar to redux\\n  @Action(PinTask)\\n  pinTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: PinTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (pinnedTask) => pinnedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Triggers the archiveTask action, similar to redux\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Function to handle how the state should be updated when the action is triggered\\n  @Action(AppError)\\n  setAppError(\\n    { patchState, getState }: StateContext<TaskStateModel>,\\n    { payload }: AppError\\n  ) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error,\\n    });\\n  }\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":""}],"line":29,"jsdoctags":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":30,"modifierKind":[123]},{"name":"type","defaultValue":"actions.ERROR","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":29,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ArchiveTask","id":"class-ArchiveTask-a234ccf45a900d20fa3ed1c724e8f9d9ccd2aead30720e0ad5be2454006fc80965411be2fa21e5491cb581055fa6b544a0872c04ef2ed467b3f97f846520c286","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\nimport { Task } from \'../task.model\';\\n// a simple store that responds to actions that change the task\'s state in a file\\n// States are classes that define a state container.\\n\\n// Defines the actions available to the app\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n};\\n\\nexport class ArchiveTask {\\n  static readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\nexport class PinTask {\\n  static readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\n// The class definition for our error field\\nexport class AppError {\\n  static readonly type = actions.ERROR;\\n  constructor(public payload: boolean) {}\\n}\\n\\n\\n\\n// The initial state of our store when the app loads.\\n// Usually you would fetch this from a server\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\n  error: boolean;\\n}\\n\\n// Sets the default state\\n@State<TaskStateModel>({\\n  name: \'taskbox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false,\\n  },\\n})\\n@Injectable()\\nexport class TasksState {\\n  // Defines a new selector for the error field\\n  @Selector()\\n  static getError(state: TaskStateModel): boolean {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel): Task[] {\\n    return state.tasks;\\n  }\\n\\n  // Triggers the PinTask action, similar to redux\\n  @Action(PinTask)\\n  pinTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: PinTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (pinnedTask) => pinnedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Triggers the archiveTask action, similar to redux\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Function to handle how the state should be updated when the action is triggered\\n  @Action(AppError)\\n  setAppError(\\n    { patchState, getState }: StateContext<TaskStateModel>,\\n    { payload }: AppError\\n  ) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error,\\n    });\\n  }\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":16,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":18,"modifierKind":[123]},{"name":"type","defaultValue":"actions.ARCHIVE_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":16,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PinTask","id":"class-PinTask-a234ccf45a900d20fa3ed1c724e8f9d9ccd2aead30720e0ad5be2454006fc80965411be2fa21e5491cb581055fa6b544a0872c04ef2ed467b3f97f846520c286","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\nimport { Task } from \'../task.model\';\\n// a simple store that responds to actions that change the task\'s state in a file\\n// States are classes that define a state container.\\n\\n// Defines the actions available to the app\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n};\\n\\nexport class ArchiveTask {\\n  static readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\nexport class PinTask {\\n  static readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {}\\n}\\n\\n// The class definition for our error field\\nexport class AppError {\\n  static readonly type = actions.ERROR;\\n  constructor(public payload: boolean) {}\\n}\\n\\n\\n\\n// The initial state of our store when the app loads.\\n// Usually you would fetch this from a server\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\n  error: boolean;\\n}\\n\\n// Sets the default state\\n@State<TaskStateModel>({\\n  name: \'taskbox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false,\\n  },\\n})\\n@Injectable()\\nexport class TasksState {\\n  // Defines a new selector for the error field\\n  @Selector()\\n  static getError(state: TaskStateModel): boolean {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel): Task[] {\\n    return state.tasks;\\n  }\\n\\n  // Triggers the PinTask action, similar to redux\\n  @Action(PinTask)\\n  pinTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: PinTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (pinnedTask) => pinnedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Triggers the archiveTask action, similar to redux\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  // Function to handle how the state should be updated when the action is triggered\\n  @Action(AppError)\\n  setAppError(\\n    { patchState, getState }: StateContext<TaskStateModel>,\\n    { payload }: AppError\\n  ) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error,\\n    });\\n  }\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":22,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":24,"modifierKind":[123]},{"name":"type","defaultValue":"actions.PIN_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":22,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"AppComponent","id":"component-AppComponent-500b5293d28e2e57a2e9b866af34cc768f847714c23a2bc9d8b3e5fbd79c349544c9b731d0841bdfd58f11283b370f176e3db760431b8a090cc6ceed4b21f395","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":[],"styles":[],"template":"<app-inbox-screen></app-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"title","defaultValue":"\'taskbox\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":12}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  // templateUrl: \'./app.component.html\',\\n  // styleUrls: [\'./app.component.css\'],\\n  template: `\\n     <app-inbox-screen></app-inbox-screen>\\n    `,\\n})\\nexport class AppComponent {\\n  title = \'taskbox\';\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"ButtonComponent","id":"component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004","file":"src/stories/button.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-button","styleUrls":["./button.css"],"styles":[],"template":"<button   type=\\"button\\"\\n   (click)=\\"onClick.emit($event)\\"\\n   [ngClass]=\\"classes\\"\\n   [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n >\\n   {{ label }}\\n </button>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"backgroundColor","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWhat background color to use\\n","description":"<p>What background color to use</p>\\n","line":26,"type":"string","decorators":[]},{"name":"label","defaultValue":"\'Button\'","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":711,"end":724,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":712,"end":720,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"required"},"comment":""}],"rawdescription":"\\n\\nButton contents\\n\\n","description":"<p>Button contents</p>\\n","line":40,"type":"string","decorators":[]},{"name":"primary","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIs this the principal call to action on the page?\\n","description":"<p>Is this the principal call to action on the page?</p>\\n","line":20,"type":"boolean","decorators":[]},{"name":"size","defaultValue":"\'medium\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHow large should the button be?\\n","description":"<p>How large should the button be?</p>\\n","line":32,"type":"\\"small\\" | \\"medium\\" | \\"large\\"","decorators":[]}],"outputsClass":[{"name":"onClick","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional click handler\\n","description":"<p>Optional click handler</p>\\n","line":46,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'storybook-button\',\\n  template: ` <button\\n    type=\\"button\\"\\n    (click)=\\"onClick.emit($event)\\"\\n    [ngClass]=\\"classes\\"\\n    [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n  >\\n    {{ label }}\\n  </button>`,\\n  styleUrls: [\'./button.css\'],\\n})\\nexport default class ButtonComponent {\\n  /**\\n   * Is this the principal call to action on the page?\\n   */\\n  @Input()\\n  primary = false;\\n\\n  /**\\n   * What background color to use\\n   */\\n  @Input()\\n  backgroundColor?: string;\\n\\n  /**\\n   * How large should the button be?\\n   */\\n  @Input()\\n  size: \'small\' | \'medium\' | \'large\' = \'medium\';\\n\\n  /**\\n   * Button contents\\n   *\\n   * @required\\n   */\\n  @Input()\\n  label = \'Button\';\\n\\n  /**\\n   * Optional click handler\\n   */\\n  @Output()\\n  onClick = new EventEmitter<Event>();\\n\\n  public get classes(): string[] {\\n    const mode = this.primary ? \'storybook-button--primary\' : \'storybook-button--secondary\';\\n\\n    return [\'storybook-button\', `storybook-button--${this.size}`, mode];\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".storybook-button {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-weight: 700;\\n  border: 0;\\n  border-radius: 3em;\\n  cursor: pointer;\\n  display: inline-block;\\n  line-height: 1;\\n}\\n.storybook-button--primary {\\n  color: white;\\n  background-color: #1ea7fd;\\n}\\n.storybook-button--secondary {\\n  color: #333;\\n  background-color: transparent;\\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\\n}\\n.storybook-button--small {\\n  font-size: 12px;\\n  padding: 10px 16px;\\n}\\n.storybook-button--medium {\\n  font-size: 14px;\\n  padding: 11px 20px;\\n}\\n.storybook-button--large {\\n  font-size: 16px;\\n  padding: 12px 24px;\\n}\\n","styleUrl":"./button.css"}],"stylesData":"","accessors":{"classes":{"name":"classes","getSignature":{"name":"classes","type":"[]","returnType":"string[]","line":48}}}},{"name":"HeaderComponent","id":"component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc","file":"src/stories/header.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-header","styleUrls":["./header.css"],"styles":[],"template":"<header>    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <div *ngIf=\\"user\\">\\n          <span class=\\"welcome\\">\\n            Welcome, <b>{{ user.name }}</b\\n            >!\\n          </span>\\n          <storybook-button\\n            *ngIf=\\"user\\"\\n            size=\\"small\\"\\n            (onClick)=\\"onLogout.emit($event)\\"\\n            label=\\"Log out\\"\\n          ></storybook-button>\\n        </div>\\n        <div *ngIf=\\"!user\\">\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            size=\\"small\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onLogin.emit($event)\\"\\n            label=\\"Log in\\"\\n          ></storybook-button>\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            primary\\n            size=\\"small\\"\\n            primary=\\"true\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onCreateAccount.emit($event)\\"\\n            label=\\"Sign up\\"\\n          ></storybook-button>\\n        </div>\\n      </div>\\n    </div>\\n  </header>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"user","defaultValue":"null","deprecated":false,"deprecationMessage":"","line":65,"type":"User | null","decorators":[]}],"outputsClass":[{"name":"onCreateAccount","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":74,"type":"EventEmitter"},{"name":"onLogin","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":68,"type":"EventEmitter"},{"name":"onLogout","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":71,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\nimport { User } from \'./User\';\\n\\n@Component({\\n  selector: \'storybook-header\',\\n  template: `<header>\\n    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <div *ngIf=\\"user\\">\\n          <span class=\\"welcome\\">\\n            Welcome, <b>{{ user.name }}</b\\n            >!\\n          </span>\\n          <storybook-button\\n            *ngIf=\\"user\\"\\n            size=\\"small\\"\\n            (onClick)=\\"onLogout.emit($event)\\"\\n            label=\\"Log out\\"\\n          ></storybook-button>\\n        </div>\\n        <div *ngIf=\\"!user\\">\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            size=\\"small\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onLogin.emit($event)\\"\\n            label=\\"Log in\\"\\n          ></storybook-button>\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            primary\\n            size=\\"small\\"\\n            primary=\\"true\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onCreateAccount.emit($event)\\"\\n            label=\\"Sign up\\"\\n          ></storybook-button>\\n        </div>\\n      </div>\\n    </div>\\n  </header>`,\\n  styleUrls: [\'./header.css\'],\\n})\\nexport default class HeaderComponent {\\n  @Input()\\n  user: User | null = null;\\n\\n  @Output()\\n  onLogin = new EventEmitter<Event>();\\n\\n  @Output()\\n  onLogout = new EventEmitter<Event>();\\n\\n  @Output()\\n  onCreateAccount = new EventEmitter<Event>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".wrapper {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 15px 20px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\nsvg {\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nh1 {\\n  font-weight: 900;\\n  font-size: 20px;\\n  line-height: 1;\\n  margin: 6px 0 6px 10px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nbutton + button {\\n  margin-left: 10px;\\n}\\n\\n.welcome {\\n  color: #333;\\n  font-size: 14px;\\n  margin-right: 10px;\\n}\\n","styleUrl":"./header.css"}],"stylesData":""},{"name":"InboxScreenComponent","id":"component-InboxScreenComponent-5ddbf388ccaf00cad1da69c38e744563917710d787234fe547ad3a4e938ddf64c23248b12d910098afc65a93d90bf0dc27c4fbe9ad449682bea4e89b8a6772f4","file":"src/app/components/inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-inbox-screen","styleUrls":[],"styles":[],"template":"<app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"error$","deprecated":false,"deprecationMessage":"","type":"Observable<boolean>","optional":false,"description":"","line":12}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { Store } from \'@ngxs/store\';\\nimport { Observable } from \'rxjs\';\\n\\n@Component({\\n  selector: \'app-inbox-screen\',\\n  template: `\\n    <app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n  `,\\n})\\nexport class InboxScreenComponent {\\n  error$: Observable<boolean>;\\n  constructor(private store: Store) {\\n    this.error$ = store.select((state) => state.taskbox.error);\\n  }\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":12,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"PageComponent","id":"component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064","file":"src/stories/page.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-page","styleUrls":["./page.css"],"styles":[],"template":"<article>    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"doLogout()\\"\\n      (onLogin)=\\"doLogin()\\"\\n      (onCreateAccount)=\\"doCreateAccount()\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://storybook.js.org/tutorials/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Storybook tutorials\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> docs </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"user","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"User | null","optional":false,"description":"","line":64}],"methodsClass":[{"name":"doCreateAccount","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":""},{"name":"doLogin","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":""},{"name":"doLogout","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { User } from \'./User\';\\n\\n@Component({\\n  selector: \'storybook-page\',\\n  template: `<article>\\n    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"doLogout()\\"\\n      (onLogin)=\\"doLogin()\\"\\n      (onCreateAccount)=\\"doCreateAccount()\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://storybook.js.org/tutorials/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Storybook tutorials\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> docs </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>`,\\n  styleUrls: [\'./page.css\'],\\n})\\nexport default class PageComponent {\\n  user: User | null = null;\\n\\n  doLogout() {\\n    this.user = null;\\n  }\\n\\n  doLogin() {\\n    this.user = { name: \'Jane Doe\' };\\n  }\\n\\n  doCreateAccount() {\\n    this.user = { name: \'Jane Doe\' };\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"section {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-size: 14px;\\n  line-height: 24px;\\n  padding: 48px 20px;\\n  margin: 0 auto;\\n  max-width: 600px;\\n  color: #333;\\n}\\n\\nsection h2 {\\n  font-weight: 900;\\n  font-size: 32px;\\n  line-height: 1;\\n  margin: 0 0 4px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nsection p {\\n  margin: 1em 0;\\n}\\n\\nsection a {\\n  text-decoration: none;\\n  color: #1ea7fd;\\n}\\n\\nsection ul {\\n  padding-left: 30px;\\n  margin: 1em 0;\\n}\\n\\nsection li {\\n  margin-bottom: 8px;\\n}\\n\\nsection .tip {\\n  display: inline-block;\\n  border-radius: 1em;\\n  font-size: 11px;\\n  line-height: 12px;\\n  font-weight: 700;\\n  background: #e7fdd8;\\n  color: #66bf3c;\\n  padding: 4px 12px;\\n  margin-right: 10px;\\n  vertical-align: top;\\n}\\n\\nsection .tip-wrapper {\\n  font-size: 13px;\\n  line-height: 20px;\\n  margin-top: 40px;\\n  margin-bottom: 40px;\\n}\\n\\nsection .tip-wrapper svg {\\n  display: inline-block;\\n  height: 12px;\\n  width: 12px;\\n  margin-right: 4px;\\n  vertical-align: top;\\n  margin-top: 3px;\\n}\\n\\nsection .tip-wrapper svg path {\\n  fill: #1ea7fd;\\n}\\n","styleUrl":"./page.css"}],"stylesData":""},{"name":"PureInboxScreenComponent","id":"component-PureInboxScreenComponent-ef08620f1091129a1d8166624590bc1c9b593a659b8916de8af338305804f022f08e3e0df036c26810a1022ce64912407f451a1cd6aca98217f604007ba0dd97","file":"src/app/components/pure-inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-inbox-screen","styleUrls":[],"styles":[],"template":"<div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n  <div class=\\"wrapper-message\\">\\n    <span class=\\"icon-face-sad\\"></span>\\n    <p class=\\"title-message\\">Oh no!</p>\\n    <p class=\\"subtitle-message\\">Something went wrong</p>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n  <nav>\\n    <h1 class=\\"title-page\\">Taskbox</h1>\\n  </nav>\\n  <app-task-list></app-task-list>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"error","deprecated":false,"deprecationMessage":"","line":23,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'app-pure-inbox-screen\',\\n  template: `\\n    <div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n      <div class=\\"wrapper-message\\">\\n        <span class=\\"icon-face-sad\\"></span>\\n        <p class=\\"title-message\\">Oh no!</p>\\n        <p class=\\"subtitle-message\\">Something went wrong</p>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n      <nav>\\n        <h1 class=\\"title-page\\">Taskbox</h1>\\n      </nav>\\n      <app-task-list></app-task-list>\\n    </div>\\n  `,\\n})\\nexport class PureInboxScreenComponent {\\n  @Input() error: any;\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"PureTaskListComponent","id":"component-PureTaskListComponent-f3cf9078e60c2c8494c51384810cf8587dad7b8dca5ac366dc27cc15fbc3c67abc08fbb0f6c9e8d0c6603b4071399e8f22c294ac3a8433c56549284dc4920f0a","file":"src/app/components/pure-task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-task-list","styleUrls":[],"styles":[],"template":"<div class=\\"list-items\\">\\n  <app-task\\n    *ngFor=\\"let task of tasksInOrder\\"\\n    [task]=\\"task\\"\\n    (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n    (onPinTask)=\\"onPinTask.emit($event)\\"\\n  >\\n  </app-task>\\n  <div\\n    *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n    class=\\"wrapper-message\\"\\n  >\\n    <span class=\\"icon-check\\"></span>\\n    <p class=\\"title-message\\">You have no tasks</p>\\n    <p class=\\"subtitle-message\\">Sit back and relax</p>\\n  </div>\\n  <div *ngIf=\\"loading\\">\\n    <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n      <span class=\\"glow-checkbox\\"></span>\\n      <span class=\\"glow-text\\">\\n        <span>Loading</span> <span>cool</span> <span>state</span>\\n      </span>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"loading","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nChecks if it\'s in loading state","description":"<p>Checks if it&#39;s in loading state</p>\\n","line":44,"type":"boolean","decorators":[]},{"name":"tasks","deprecated":false,"deprecationMessage":"","line":61,"type":"Task[]","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":58,"type":"EventEmitter<any>"},{"name":"onPinTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":55,"type":"EventEmitter<any>"}],"propertiesClass":[{"name":"tasksInOrder","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Task[]","optional":false,"description":"<ul>\\n<li><ul>\\n<li>@ignore</li>\\n</ul>\\n</li>\\n<li><ul>\\n<li>Component property to define ordering of tasks</li>\\n</ul>\\n</li>\\n<li></li>\\n</ul>\\n","line":41,"rawdescription":"\\n\\n+  * @ignore\\n+  * Component property to define ordering of tasks\\n+"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\nimport { Task } from \'../task.model\';\\n\\n@Component({\\n  selector: \'app-pure-task-list\',\\n  template: `\\n    <div class=\\"list-items\\">\\n      <app-task\\n        *ngFor=\\"let task of tasksInOrder\\"\\n        [task]=\\"task\\"\\n        (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n        (onPinTask)=\\"onPinTask.emit($event)\\"\\n      >\\n      </app-task>\\n      <div\\n        *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n        class=\\"wrapper-message\\"\\n      >\\n        <span class=\\"icon-check\\"></span>\\n        <p class=\\"title-message\\">You have no tasks</p>\\n        <p class=\\"subtitle-message\\">Sit back and relax</p>\\n      </div>\\n      <div *ngIf=\\"loading\\">\\n        <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n          <span class=\\"glow-checkbox\\"></span>\\n          <span class=\\"glow-text\\">\\n            <span>Loading</span> <span>cool</span> <span>state</span>\\n          </span>\\n        </div>\\n      </div>\\n    </div>\\n    `,\\n})\\nexport class PureTaskListComponent {\\n  /** The list of tasks */\\n  /**\\n+  * @ignore\\n+  * Component property to define ordering of tasks\\n+  */\\n  tasksInOrder: Task[] = [];\\n\\n  /** Checks if it\'s in loading state */\\n  @Input() loading = false;\\n  \\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  // @Output()\\n  // onPinTask = new EventEmitter<Event>();\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  // @Output()\\n  // onArchiveTask = new EventEmitter<Event>();\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\\n\\n  @Input()\\n  set tasks(arr: Task[]) {\\n    const initialTasks = [\\n      ...arr.filter(t => t.state === \'TASK_PINNED\'),\\n      ...arr.filter(t => t.state !== \'TASK_PINNED\'),\\n    ];\\n    const filteredTasks = initialTasks.filter(\\n      t => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n    this.tasksInOrder = filteredTasks.filter(\\n      t => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","accessors":{"tasks":{"name":"tasks","setSignature":{"name":"tasks","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":61,"jsdoctags":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"TaskComponent","id":"component-TaskComponent-db0f3a8fa5763c989a970956cf7dd629bbc65f7e5da15ec38f258530a980a4fc60f0388b60014c8cd5fdcf3fb64ed11643be41a4bcb8f5e1b00f3756dae5a6cc","file":"src/app/components/task.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task","styleUrls":[],"styles":[],"template":"  <div class=\\"list-item {{ task?.state }}\\">\\n  <label\\n    [attr.aria-label]=\\"\'archiveTask-\' + task.id\\"\\n    for=\\"checked-{{ task?.id }}\\"\\n    class=\\"checkbox\\"\\n  >\\n    <input\\n      type=\\"checkbox\\"\\n      disabled=\\"true\\"\\n      [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n      name=\\"checked-{{ task?.id }}\\"\\n      id=\\"checked-{{ task?.id }}\\"\\n    />\\n    <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task.id)\\"></span>\\n  </label>\\n  <label\\n    [attr.aria-label]=\\"task.title + \'\'\\"\\n    for=\\"title-{{ task?.id }}\\"\\n    class=\\"title\\"\\n  >\\n    <input\\n      type=\\"text\\"\\n      [value]=\\"task.title\\"\\n      readonly=\\"true\\"\\n      id=\\"title-{{ task?.id }}\\"\\n      name=\\"title-{{ task?.id }}\\"\\n      placeholder=\\"Input title\\"\\n    />\\n  </label>\\n  <button\\n    *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n    class=\\"pin-button\\"\\n    [attr.aria-label]=\\"\'pinTask-\' + task.id\\"\\n    (click)=\\"onPin(task.id)\\"\\n  >\\n    <span class=\\"icon-star\\"></span>\\n  </button>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"task","deprecated":false,"deprecationMessage":"","line":48,"type":"Task","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":56,"type":"EventEmitter"},{"name":"onPinTask","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":52,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[{"name":"onArchive","args":[{"name":"id","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the onArchive event\\n","description":"<p>Component method to trigger the onArchive event</p>\\n","jsdoctags":[{"name":{"pos":1578,"end":1580,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"any","deprecated":false,"deprecationMessage":"","tagName":{"pos":1572,"end":1577,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>string</p>\\n"}]},{"name":"onPin","args":[{"name":"id","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":61,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the onPin event\\n","description":"<p>Component method to trigger the onPin event</p>\\n","jsdoctags":[{"name":{"pos":1438,"end":1440,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"any","deprecated":false,"deprecationMessage":"","tagName":{"pos":1432,"end":1437,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>string</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\nimport { Task } from \'../task.model\';\\n\\n@Component({\\n  selector: \'app-task\',\\n  template: `\\n  <div class=\\"list-item {{ task?.state }}\\">\\n  <label\\n    [attr.aria-label]=\\"\'archiveTask-\' + task.id\\"\\n    for=\\"checked-{{ task?.id }}\\"\\n    class=\\"checkbox\\"\\n  >\\n    <input\\n      type=\\"checkbox\\"\\n      disabled=\\"true\\"\\n      [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n      name=\\"checked-{{ task?.id }}\\"\\n      id=\\"checked-{{ task?.id }}\\"\\n    />\\n    <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task.id)\\"></span>\\n  </label>\\n  <label\\n    [attr.aria-label]=\\"task.title + \'\'\\"\\n    for=\\"title-{{ task?.id }}\\"\\n    class=\\"title\\"\\n  >\\n    <input\\n      type=\\"text\\"\\n      [value]=\\"task.title\\"\\n      readonly=\\"true\\"\\n      id=\\"title-{{ task?.id }}\\"\\n      name=\\"title-{{ task?.id }}\\"\\n      placeholder=\\"Input title\\"\\n    />\\n  </label>\\n  <button\\n    *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n    class=\\"pin-button\\"\\n    [attr.aria-label]=\\"\'pinTask-\' + task.id\\"\\n    (click)=\\"onPin(task.id)\\"\\n  >\\n    <span class=\\"icon-star\\"></span>\\n  </button>\\n</div>\\n`,\\n})\\nexport class TaskComponent {\\n  @Input() task: Task;\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output()\\n  onPinTask = new EventEmitter<Event>();\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output()\\n  onArchiveTask = new EventEmitter<Event>();\\n  /**\\n   * Component method to trigger the onPin event\\n   * @param id string\\n   */\\n   onPin(id: any) {\\n    this.onPinTask.emit(id);\\n  }\\n  /**\\n   * Component method to trigger the onArchive event\\n   * @param id string\\n   */\\n  onArchive(id: any) {\\n    this.onArchiveTask.emit(id);\\n  }\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"TaskListComponent","id":"component-TaskListComponent-f3f68eb936c572be2e65f2c7d7b7f39303c1ee69d350e2a88431cd3fb1e17dcc511b550ec4ce9e859e5e241e5d3ee8d558d1b62d74bcfffa40b413cd1c259746","file":"src/app/components/task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task-list","styleUrls":[],"styles":[],"template":"<app-pure-task-list\\n  [tasks]=\\"tasks$ | async\\"\\n  (onArchiveTask)=\\"archiveTask($event)\\"\\n  (onPinTask)=\\"pinTask($event)\\"\\n></app-pure-task-list>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"tasks$","deprecated":false,"deprecationMessage":"","type":"Observable<any>","optional":true,"description":"","line":20}],"methodsClass":[{"name":"archiveTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the archiveTask event\\n","description":"<p>Component method to trigger the archiveTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the pinTask event\\n","description":"<p>Component method to trigger the pinTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { Store } from \'@ngxs/store\'; // read data from the store\\nimport { ArchiveTask, PinTask } from \'../state/task.state\';\\nimport { Observable } from \'rxjs\';\\n\\n\\n// keep the presentational version of the TaskList separate is that it is easier to test and isolate.\\n// As it doesn\'t rely on the presence of a store, it is much easier to deal with from a testing perspective.\\n@Component({\\n  selector: \'app-task-list\',\\n  template: `\\n    <app-pure-task-list\\n      [tasks]=\\"tasks$ | async\\"\\n      (onArchiveTask)=\\"archiveTask($event)\\"\\n      (onPinTask)=\\"pinTask($event)\\"\\n    ></app-pure-task-list>\\n  `,\\n})\\nexport class TaskListComponent {\\n  tasks$?: Observable<any>;\\n\\n  constructor(private store: Store) {\\n     this.tasks$ = store.select((state) => state.taskbox.tasks);\\n  }\\n\\n  /**\\n   * Component method to trigger the archiveTask event\\n   */\\n  // to inject the Store service into your component/service and invoke the dispatch function with an action\\n  // or an array of actions you wish to trigger.\\n  archiveTask(id: string) {\\n    this.store.dispatch(new ArchiveTask(id));\\n  }\\n\\n  /**\\n   * Component method to trigger the pinTask event\\n   */\\n  pinTask(id: string) {\\n    this.store.dispatch(new PinTask(id));\\n  }\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":20,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}],"modules":[{"name":"AppModule","id":"module-AppModule-bb95b6a1a32c5c42fe009e233fc80d584a62ae3fdd9623ee63413aaed451a015299d5e0789734bdc357012ca7bd020354dc995d4605fdf9979edf7816faad613","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { BrowserModule } from \'@angular/platform-browser\';\\n\\n\\nimport { TaskModule } from \'./components/task.module\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { NgxsReduxDevtoolsPluginModule } from \'@ngxs/devtools-plugin\';\\nimport { NgxsLoggerPluginModule } from \'@ngxs/logger-plugin\';\\n\\nimport { environment } from \'../environments/environment\';\\nimport { AppComponent } from \'./app.component\';\\n\\nimport { InboxScreenComponent } from \'./components/inbox-screen.component\';\\nimport { PureInboxScreenComponent } from \'./components/pure-inbox-screen.component\';\\n\\n// wire the store to the app.\\n\\n@NgModule({\\n  declarations: [AppComponent,InboxScreenComponent,PureInboxScreenComponent],\\n  imports: [BrowserModule,\\n            TaskModule,\\n             NgxsModule.forRoot([], {\\n              developmentMode: !environment.production,\\n            }),\\n            NgxsReduxDevtoolsPluginModule.forRoot(),\\n            NgxsLoggerPluginModule.forRoot({\\n              disabled: environment.production,\\n            }),\\n            ],\\n  providers: [],\\n  bootstrap: [AppComponent],\\n})\\nexport class AppModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"},{"name":"InboxScreenComponent"},{"name":"PureInboxScreenComponent"}]},{"type":"imports","elements":[{"name":"TaskModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]},{"name":"TaskModule","id":"module-TaskModule-3cb780dccfeccd6d1f48ceca305c6d5b1b83d3487921461330835f37dc2f815d8dae5d0d31a92015d4d7a26aa01b8a7551febde8dd768b4d98d7d1dfd0a0e282","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/components/task.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { NgxsModule } from \'@ngxs/store\';\\n\\nimport { TaskComponent } from \'./task.component\';\\nimport { TaskListComponent } from \'./task-list.component\';\\nimport { TasksState } from \'../state/task.state\';\\nimport { PureTaskListComponent } from \'./pure-task-list.component\';\\n\\n\\n// module to bridge the components and the store.\\n\\n@NgModule({\\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\\n  exports: [TaskComponent, TaskListComponent],\\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent],\\n  providers: [],\\n})\\nexport class TaskModule {}","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"PureTaskListComponent"},{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}"},{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  onPinTask: action(\'onPinTask\'),\\n  onArchiveTask: action(\'onArchiveTask\'),\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n]"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false\\n}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Button>","defaultValue":"(args: Button) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Header>","defaultValue":"(args: Header) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Page>","defaultValue":"(args: Page) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: {\\n    ...args,\\n    onPinTask: TaskStories.actionsData.onPinTask,\\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\\n  },\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: {\\n    ...args,\\n    onPinTask: actionsData.onPinTask,\\n    onArchiveTask: actionsData.onArchiveTask,\\n  },\\n})"},{"name":"WithInteractions","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Yang","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"YangArchived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"YangPinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/app/state/task.state.ts":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n]"}],"src/app/components/task.stories.ts":[{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  onPinTask: action(\'onPinTask\'),\\n  onArchiveTask: action(\'onArchiveTask\'),\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: {\\n    ...args,\\n    onPinTask: actionsData.onPinTask,\\n    onArchiveTask: actionsData.onArchiveTask,\\n  },\\n})"},{"name":"Yang","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"YangArchived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"YangPinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"}],"src/app/components/pure-inbox-screen.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: args,\\n})"},{"name":"WithInteractions","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"}],"src/app/components/pure-task-list.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"args => ({\\n  props: {\\n    ...args,\\n    onPinTask: TaskStories.actionsData.onPinTask,\\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\\n  },\\n})"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true\\n}"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false\\n}"}],"src/stories/Button.stories.ts":[{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Button>","defaultValue":"(args: Button) => ({\\n  props: args,\\n})"}],"src/stories/Header.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Header>","defaultValue":"(args: Header) => ({\\n  props: args,\\n})"}],"src/stories/Page.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<Page>","defaultValue":"(args: Page) => ({\\n  props: args,\\n})"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}},"routes":[],"coverage":{"count":3,"status":"low","files":[{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen.component.ts","type":"component","linktype":"component","name":"InboxScreenComponent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.component.ts","type":"component","linktype":"component","name":"PureInboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Error","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithInteractions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.component.ts","type":"component","linktype":"component","name":"PureTaskListComponent","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Empty","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Loading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithPinnedTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list.component.ts","type":"component","linktype":"component","name":"TaskListComponent","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"src/app/components/task.component.ts","type":"component","linktype":"component","name":"TaskComponent","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actionsData","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Archived","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Pinned","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Yang","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"YangArchived","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"YangPinned","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"AppError","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"ArchiveTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"PinTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"injectable","linktype":"injectable","name":"TasksState","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"interface","linktype":"interface","name":"TaskStateModel","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defaultTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/task.model.ts","type":"interface","linktype":"interface","name":"Task","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Large","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Secondary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Small","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/User.ts","type":"interface","linktype":"interface","name":"User","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/button.component.ts","type":"component","linktype":"component","name":"ButtonComponent","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"src/stories/header.component.ts","type":"component","linktype":"component","name":"HeaderComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/stories/page.component.ts","type":"component","linktype":"component","name":"PageComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"}]}}');(0,angular.P)(documentation_namespaceObject);var parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}},docs:{inlineStories:!0}},__namedExportsOrder=["parameters"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return(0,ClientApi.uc)(value);case"argTypes":return(0,ClientApi.v9)(value);case"decorators":return value.forEach((function(decorator){return(0,ClientApi.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,ClientApi.HZ)(loader,!1)}));case"parameters":return(0,ClientApi.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,ClientApi.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,ClientApi._C)(enhancer)}));case"render":return(0,ClientApi.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,ClientApi.h1)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./storybook-init-framework-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js")},"./src/styles.css":()=>{},"./src/app/components sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.ts)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./pure-inbox-screen.stories.ts":"./src/app/components/pure-inbox-screen.stories.ts","./pure-task-list.stories.ts":"./src/app/components/pure-task-list.stories.ts","./task.stories.ts":"./src/app/components/task.stories.ts"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./src/app/components sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.ts)$"},"?4f7e":()=>{},"./generated-stories-entry.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js").configure)([__webpack_require__("./src/app/components sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.ts)$")],module,!1)}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[877],(()=>(__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_exec__("./storybook-init-framework-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/docs/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/preview/config.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-interactions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-a11y/preview.js-generated-config-entry.js"),__webpack_exec__("./.storybook/preview.js-generated-config-entry.js"),__webpack_exec__("./generated-stories-entry.cjs"),__webpack_exec__("./src/styles.css"),__webpack_exec__("./src/polyfills.ts"),__webpack_exec__("./node_modules/core-js/proposals/reflect-metadata.js"))));__webpack_require__.O()}]);